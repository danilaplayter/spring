plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
    id 'checkstyle'
    id 'org.openapi.generator' version '6.6.0'
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'ru.mentee.power'
version = '2.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    versions = [
            springdoc        : '2.5.0',
            postgresql       : '42.6.0',
            lombok           : '1.18.30',
            mapstruct        : '1.5.5.Final',
            mapstructLombok  : '0.2.0',
            slf4j            : '2.0.9',
            logback          : '1.4.14',
            junit            : '5.10.0',
            assertj          : '3.24.2',
            mockito          : '5.7.0',
            testcontainers   : '1.19.7',
            h2               : '2.2.224',
            googleJavaFormat : '1.17.0',
            jackson          : '2.17.0',
            jaxbApi          : '4.0.0',
            jaxbRuntime      : '4.0.2',
            caffeine         : '3.1.8'
    ]
}

dependencies {
    // === SPRING BOOT ===
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // === DATABASE ===
    implementation "org.liquibase:liquibase-core"
    runtimeOnly "com.h2database:h2:${versions.h2}"
    testImplementation "com.h2database:h2:${versions.h2}"
    implementation "org.postgresql:postgresql:${versions.postgresql}"

    // === VALIDATION ===
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'

    // === CACHING ===
    implementation "com.github.ben-manes.caffeine:caffeine:${versions.caffeine}"

    // === MAPSTRUCT + LOMBOK ===
    implementation "org.mapstruct:mapstruct:${versions.mapstruct}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${versions.mapstruct}"

    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${versions.mapstructLombok}"

    // === LOGGING ===
    implementation "org.slf4j:slf4j-api:${versions.slf4j}"
    implementation "ch.qos.logback:logback-classic:${versions.logback}"
    implementation "ch.qos.logback:logback-core:${versions.logback}"

    // === JACKSON ===
    implementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"
    implementation 'com.jayway.jsonpath:json-path:2.9.0'

    // === XML Binding ===
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:${versions.jaxbApi}"
    implementation "org.glassfish.jaxb:jaxb-runtime:${versions.jaxbRuntime}"

    // === OpenAPI ===
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${versions.springdoc}"
    implementation "org.openapitools:jackson-databind-nullable:0.2.6"
    implementation "io.swagger.core.v3:swagger-annotations:2.2.19"
    implementation "jakarta.annotation:jakarta.annotation-api:2.1.1"

    // === TESTING ===
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation platform("org.junit:junit-bom:${versions.junit}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.mockito:mockito-junit-jupiter:${versions.mockito}"
    testImplementation "org.assertj:assertj-core:${versions.assertj}"
    testImplementation "org.testcontainers:testcontainers:${versions.testcontainers}"
    testImplementation "org.testcontainers:junit-jupiter:${versions.testcontainers}"
    testImplementation "org.testcontainers:postgresql:${versions.testcontainers}"
    testImplementation 'io.rest-assured:rest-assured:5.3.2'
    testImplementation 'io.rest-assured:json-path:5.3.2'
    testImplementation "io.rest-assured:xml-path:5.3.2"

    testCompileOnly "org.projectlombok:lombok:${versions.lombok}"
    testAnnotationProcessor "org.projectlombok:lombok:${versions.lombok}"
}

// === SOURCE SETS ===
sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/main/java"
        }
    }
}

// === OPENAPI GENERATION ===
openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/task-management-api.yaml"
    outputDir = "$buildDir/generated"
    apiPackage = "ru.mentee.power.api.generated.controller"
    modelPackage = "ru.mentee.power.api.generated.dto"
    configOptions = [
            dateLibrary          : "java8",
            interfaceOnly        : "true",
            useTags              : "true",
            performBeanValidation: "true",
            useBeanValidation    : "true",
            useSpringBoot3       : "true"
    ]
}

// === CHECKSTYLE ===
checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${rootDir}/config/checkstyle/google_checks.xml")
    maxErrors = 0
    ignoreFailures = false
}

// === TESTS + COVERAGE ===
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    testLogging {
        events "passed", "skipped", "failed"
        showExceptions = true
        exceptionFormat = 'full'
    }
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

// === SPOTLESS ===
spotless {
    java {
        target 'src/**/*.java', 'build/generated/src/main/java/**/*.java'
        googleJavaFormat("${versions.googleJavaFormat}").aosp()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeader '/* @MENTEE_POWER (C)$YEAR */'
    }

    sql {
        target 'src/**/*.sql'
        dbeaver()
    }

    format 'misc', {
        target '*.gradle', '*.md', '.gitignore', '.gitattributes'
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }

    enforceCheck = true
}

// === TASK DEPENDENCIES ===
tasks.named('openApiGenerate') {
    outputs.dir("$buildDir/generated")
}

tasks.named('compileJava') {
    dependsOn 'openApiGenerate', 'spotlessApply'
}

tasks.named('compileTestJava') {
    dependsOn 'spotlessApply'
}

tasks.named('build') {
    dependsOn 'spotlessCheck'
}

tasks.named('check') {
    dependsOn jacocoTestReport, 'spotlessCheck'
}

tasks.named('clean') {
    doLast {
        delete "$buildDir/generated"
    }
}

tasks.named('spotlessJava') {
    dependsOn tasks.named('openApiGenerate')
}
tasks.named('spotlessCheck') {
    dependsOn tasks.named('openApiGenerate')
}

// === EXTRA FORMAT TASKS ===
tasks.register('format') {
    group = 'formatting'
    description = 'Formats all source code including generated'
    dependsOn 'spotlessApply'
}

tasks.register('checkFormat') {
    group = 'formatting'
    description = 'Checks code formatting including generated'
    dependsOn 'spotlessCheck'
}

tasks.register('formatGenerated') {
    group = 'formatting'
    description = 'Formats only generated code'
    dependsOn 'openApiGenerate'
    doLast {
        spotlessApply.execute()
    }
}
